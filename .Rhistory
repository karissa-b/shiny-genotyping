output$files <- renderTable(input$upload)
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
# Define server logic required to draw a histogram
server <- function(input, output, session) {
output$files <- renderTable(input$upload)
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
runApp()
runApp()
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Melt curve genotyping",
windowTitle = "Genotyping from melt curves"
),
# add the ability to ipload files.
fileInput("upload",
accept = ".txt",
label = "Upload files", # title
multiple = TRUE # mutliple files is true so can add all the files I need
),
tableOutput("files"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
runApp()
library(vroom)
runApp()
runApp()
install.packages("shinythemes")
library(shinythemes)
# Define UI for application that draws a histogram
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "simplex"),
# Application title
titlePanel("Melt curve genotyping",
windowTitle = "Genotyping from melt curves"
),
# add the ability to upload files.
fileInput("upload",
accept = ".txt",
label = "Upload files", # title
multiple = TRUE # mutliple files is true so can add all the files I need
),
tableOutput("files"),
# download ----------------------------------------------------------------
downloadButton("download1"),
downloadLink("download2"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
output$files <- renderTable(input$upload)
data <- reactive({
req(input$upload)
ext <- tools::file_ext(input$upload$name)
switch(ext,
tsv = vroom::vroom(input$upload$datapath, delim = "\t"),
validate("Invalid file; Please upload a .tsv file")
)
})
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
# Run the application
shinyApp(ui = ui, server = server)
),
# Define UI for application that draws a histogram
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "simplex"),
# Application title
titlePanel("Melt curve genotyping",
windowTitle = "Genotyping from melt curves"
),
tabsetPanel(
tabPanel("Import data",
fileInput("upload",accept = ".txt",
label = "Upload files", # title
multiple = TRUE # mutliple files is true so can add all the files I need
),
)),
tableOutput("files"),
# download ----------------------------------------------------------------
downloadButton("download1"),
downloadLink("download2"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
runApp()
# Define UI for application that draws a histogram
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "simplex"),
# Application title
titlePanel("Melt curve genotyping",
windowTitle = "Genotyping from melt curves"
),
tabsetPanel(
tabPanel("Import data",
fileInput("upload",accept = ".txt",
label = "Upload files", # title
multiple = TRUE # mutliple files is true so can add all the files I need
),
)),
tableOutput("files"),
# download ----------------------------------------------------------------
downloadButton("download1"),
downloadLink("download2"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
runApp()
runApp()
library(shiny)
library(vroom)
library(shinythemes)
# user interface ----------------------------------------------------------
# Define UI for application that draws a histogram
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "simplex"),
# Application title
titlePanel("Melt curve genotyping",
windowTitle = "Genotyping from melt curves"
),
tabsetPanel(
tabPanel("Import data",
fileInput("upload",accept = ".txt",
label = "Upload files", # title
multiple = TRUE # mutliple files is true so can add all the files I need
),
)),
tableOutput("files"),
)
# server function ---------------------------------------------------------
# Define server logic required to draw a histogram
server <- function(input, output, session) {
output$files <- renderTable(input$upload)
data <- reactive({
req(input$upload)
ext <- tools::file_ext(input$upload$name)
switch(ext,
tsv = vroom::vroom(input$upload$datapath, delim = "\t"),
validate("Invalid file; Please upload a .tsv file")
)
})
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "simplex"),
# Application title
titlePanel("Melt curve genotyping",
windowTitle = "Genotyping from melt curves"
),
tabPanel("Import data",
fileInput(
"upload",
accept = ".txt",
label = "Upload files", # title
multiple = TRUE # mutliple files is true so can add all the files I need
)),
tableOutput("files"),
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
output$files <- renderTable(input$upload)
data <- reactive({
req(input$upload)
ext <- tools::file_ext(input$upload$name)
switch(ext,
tsv = vroom::vroom(input$upload$datapath, delim = "\t"),
validate("Invalid file; Please upload a .tsv file")
)
})
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
# Run the application
shinyApp(ui = ui, server = server)
?sliderInput
# Define UI for application that draws a histogram
ui <- fluidPage(
# theme of the page
theme = bslib::bs_theme(bootswatch = "simplex"),
# Application title
titlePanel("Melt curve genotyping",
windowTitle = "Genotyping from melt curves"
),
# input data
tabPanel("Import data",
fileInput(
"upload",
accept = ".txt",
label = "Upload files", # title
multiple = TRUE # mutliple files is true so can add all the files I need
)),
tableOutput("files"),
# input params
sliderInput(inputId = "mut_temp",
label = "Mutant temp range",
value = 80,
min = 60,
max = 100,
step = 0.1),
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
output$files <- renderTable(input$upload)
data <- reactive({
req(input$upload)
ext <- tools::file_ext(input$upload$name)
switch(ext,
tsv = vroom::vroom(input$upload$datapath, delim = "\t"),
validate("Invalid file; Please upload a .tsv file")
)
})
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# theme of the page
theme = bslib::bs_theme(bootswatch = "simplex"),
# Application title
titlePanel("Melt curve genotyping",
windowTitle = "Genotyping from melt curves"
),
# input data
tabPanel("Import data",
fileInput(
"upload",
accept = ".txt",
label = "Upload files", # title
multiple = TRUE # mutliple files is true so can add all the files I need
)),
tableOutput("files"),
# input params
sliderInput(inputId = "rng",
label = "Mutant temp range",
value = c(80.2, 81.9),
min = 60,
max = 100,
step = 0.1),
)
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# theme of the page
theme = bslib::bs_theme(bootswatch = "simplex"),
# Application title
titlePanel("Melt curve genotyping",
windowTitle = "Genotyping from melt curves"
),
# input data
tabPanel("Import data",
fileInput(
"upload",
accept = ".txt",
label = "Upload files", # title
multiple = TRUE # mutliple files is true so can add all the files I need
)),
tableOutput("files"),
# input params
numericInput(inputId = "mut_temp_min",
label = "Mutant peak min temp",
value = c(80.2),
min = 60,
max = 100),
)
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
# Define UI for application that draws a histogram
ui <- fluidPage(
# theme of the page
theme = bslib::bs_theme(bootswatch = "simplex"),
# Application title
titlePanel("Melt curve genotyping",
windowTitle = "Genotyping from melt curves"
),
# input data
tabPanel("Import data",
fileInput(
"upload",
accept = ".txt",
label = "Upload files", # title
multiple = TRUE # mutliple files is true so can add all the files I need
)),
tableOutput("files"),
# Input params ------------------------------------------------------------
# mut temp min
numericInput(inputId = "mut_temp_min",
label = "Mutant peak min temp",
value = 80.2,
min = 60,
max = 100),
# mut temp max
numericInput(inputId = "mut_temp_max",
label = "Mutant peak max temp",
value = 81.9,
min = 60,
max = 100),
# wt temp min
numericInput(inputId = "wt_temp_min",
label = "wt peak min temp",
value = 82.8,
min = 60,
max = 100),
# wt temp max
numericInput(inputId = "wt_temp_max",
label = "wt peak max temp",
value = 84.5,
min = 60,
max = 100),
# plot the raw data  ------------------------------------------------------
plotOutput(outputId = "plot_define")
)
runApp()
# Define UI for application that draws a histogram
ui <- fluidPage(
# theme of the page
theme = bslib::bs_theme(bootswatch = "simplex"),
# Application title
titlePanel("Melt curve genotyping",
windowTitle = "Genotyping from melt curves"
),
# input data
tabPanel(title = "Import data",
fileInput(
inputId = "upload",
accept = ".txt",
label = "Upload files", # title
multiple = TRUE # mutliple files is true so can add all the files I need
)),
tableOutput("files"),
# Input params ------------------------------------------------------------
# mut temp min
numericInput(inputId = "mut_temp_min",
label = "Mutant peak min temp",
value = 80.2,
min = 60,
max = 100),
# mut temp max
numericInput(inputId = "mut_temp_max",
label = "Mutant peak max temp",
value = 81.9,
min = 60,
max = 100),
# wt temp min
numericInput(inputId = "wt_temp_min",
label = "wt peak min temp",
value = 82.8,
min = 60,
max = 100),
# wt temp max
numericInput(inputId = "wt_temp_max",
label = "wt peak max temp",
value = 84.5,
min = 60,
max = 100),
# plot the raw data  ------------------------------------------------------
plotOutput(outputId = "plot_define")
)
runApp()
runApp()
?fread
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
))
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
